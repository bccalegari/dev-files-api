package com.devfiles.core.file.infrastructure.adapter.controller;

import com.devfiles.core.file.application.usecase.QueryFileUseCase;
import com.devfiles.core.file.infrastructure.adapter.dto.QueryFileRequestDto;
import com.devfiles.core.file.infrastructure.adapter.dto.QueryFileResponseDto;
import com.devfiles.enterprise.infrastructure.adapter.dto.ResponseDto;
import com.devfiles.enterprise.infrastructure.annotation.ApiPostV1;
import com.devfiles.enterprise.infrastructure.annotation.UserAuthorizationValidator;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping(path = "users/{user_slug}/files/{file_slug}/query")
@Tag(name = "File", description = "Endpoints for file management")
@RequiredArgsConstructor
public class QueryFileController {
    private final QueryFileUseCase queryFileUseCase;
    private final FilesLinksFactory filesLinksFactory;

    @ApiPostV1(
            summary = "Query over a file",
            description = """
                    Query any information over a file, the answer will be generated by AI with the file content as context.
                    """,
            tags = {"File"},
            responseCode = "200"
    )
    @UserAuthorizationValidator
    public ResponseEntity<ResponseDto<QueryFileResponseDto>> execute(
            @RequestAttribute(name = "logged_in_user_slug") String loggedInUserSlug,
            @PathVariable(value = "user_slug") String userSlug,
            @PathVariable(value = "file_slug") String fileSlug,
            @Valid @RequestBody QueryFileRequestDto queryFileRequestDto
    ) {
        var response = queryFileUseCase.execute(queryFileRequestDto.getQuery(), userSlug, fileSlug);
        response.createLinks(
                List.of(
                        filesLinksFactory.self(loggedInUserSlug, fileSlug),
                        filesLinksFactory.delete(loggedInUserSlug, fileSlug)
                )
        );
        return ResponseEntity.status(HttpStatus.OK).body(response);
    }
}
